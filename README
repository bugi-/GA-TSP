A Fortran implementation of a parallel genetic algorithm for solving the travelling sales man problem. Final project for the course Tools of High Performance Computing at University of Helsinki.


Requirements:
 Current implementation relies on a gnu extension so gfortran should be used. Makefile also uses gfortran for now.


Usage:
 compile with:
  'make' for standard main program
  'make openmmp' for openmp parallelized version of main
  'make main_debug' for bounds checking and extra warnings etc. for main
  'make test' for a simple and inconclusive unit test suite (still much better than most scientific computing programs I have seen)
  
 use with:
   Set parameters for the run in the file 'preferences' and run 'main'. Output is normally to stdout.
   Test suite is launched with 'test'. Some tests require manual inspection to see if result is as it should. Guides for inspection are often provided.


Notes:
 - A Git repository is included in the working folder.
 - random_number used by this program is thread safe at least when compiled with GNU compilers
 -The OpenMP version may print out some warnings during compilation (if compiled with e.g. -Wall). These warnings seem to be related to some compiler optimizations and present no actual problems for the program.
 - Due to the indeterministic way the treads are scheduled by the CPU, the sequence of random numbers used by a certain population may change between runs and thus produce differing results.
